// File: handlers/interactionHandler.js
const {
  EmbedBuilder,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  ModalBuilder,
  TextInputBuilder,
  TextInputStyle,
  PermissionsBitField,
  CategoryChannel,
  PermissionFlagsBits,
} = require("discord.js");
const {
  closedTicketCategory,
  ticketCategory,
  roleSupport,
} = require("../config.js");

const fs = require("fs");
const path = require("path");
const configPath = path.join(__dirname, "../config.js");
const config = require(configPath);

/**
 * Ki·ªÉm tra n·∫øu category full 50 k√™nh, t·∫°o category m·ªõi
 * @param {Guild} guild - Server Discord
 * @returns {Promise<CategoryChannel>} - Category m·ªõi ho·∫∑c category c≈© n·∫øu ch∆∞a ƒë·∫ßy
 */
async function getOrCreateClosedCategory(guild) {
  let category = guild.channels.cache.get(config.closedTicketCategory);

  // N·∫øu category ƒë·∫ßy (50 k√™nh)
  if (category && category.children.cache.size >= 50) {
    const date = new Date();
    const newCategoryName = `Kho Ticket T·ª´ ${date.getDate()}-${
      date.getMonth() + 1
    }`;

    // T·∫°o category m·ªõi
    category = await guild.channels.create({
      name: newCategoryName,
      type: 4, // 4 l√† Category
      permissionOverwrites: [
        {
          id: guild.roles.everyone.id,
          deny: [PermissionFlagsBits.ViewChannel],
        },
      ],
    });

    // C·∫≠p nh·∫≠t config
    config.closedTicketCategory = category.id;
    fs.writeFileSync(
      configPath,
      `module.exports = ${JSON.stringify(config, null, 2)};`
    );
  }

  return category;
}

module.exports = async (interaction) => {
  const user = interaction.user;
  const channel = interaction.channel;
  const member = await interaction.guild.members.fetch(user.id);
  const ticketOwnerId = channel.topic;

  if (interaction.isButton()) {
    if (
      interaction.customId === "buy_ticket" ||
      interaction.customId === "support_ticket"
    ) {
      const modal = new ModalBuilder()
        .setCustomId(`ticket_reason_${interaction.customId}`) // L∆∞u ID n√∫t
        .setTitle("Ma ƒê·∫°o Store");

      const reasonInput = new TextInputBuilder()
        .setCustomId("reason_input")
        .setLabel("M√¥ t·∫£ / L√Ω do t·∫°o ticket")
        .setPlaceholder("Nh·∫≠p m√¥ t·∫£ s·∫£n ph·∫©m ho·∫∑c l√Ω do ticket")
        .setStyle(TextInputStyle.Paragraph)
        .setMinLength(5)
        .setMaxLength(150);

      const actionRow = new ActionRowBuilder().addComponents(reasonInput);
      modal.addComponents(actionRow);

      await interaction.showModal(modal);
    } else if (interaction.customId === "lock_ticket") {
      if (!member.roles.cache.has(roleSupport)) {
        return interaction.reply({
          content: "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng ch·ª©c nƒÉng n√†y!",
          ephemeral: true,
        });
      }
      await channel.permissionOverwrites.edit(ticketOwnerId, {
        ViewChannel: false,
      });
      await interaction.update({
        components: [
          new ActionRowBuilder().addComponents(
            new ButtonBuilder()
              .setCustomId("unlock_ticket")
              .setLabel("üîì M·ªü Kho√°")
              .setStyle(ButtonStyle.Success),
            new ButtonBuilder()
              .setCustomId("close_ticket")
              .setLabel("‚ùå ƒê√≥ng Ticket")
              .setStyle(ButtonStyle.Secondary)
          ),
        ],
      });
    } else if (interaction.customId === "unlock_ticket") {
      if (!member.roles.cache.has(roleSupport)) {
        return interaction.reply({
          content: "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng ch·ª©c nƒÉng n√†y!",
          ephemeral: true,
        });
      }
      await channel.permissionOverwrites.edit(ticketOwnerId, {
        ViewChannel: true,
      });
      await interaction.update({
        components: [
          new ActionRowBuilder().addComponents(
            new ButtonBuilder()
              .setCustomId("lock_ticket")
              .setLabel("üîí Kho√° Ticket")
              .setStyle(ButtonStyle.Danger),
            new ButtonBuilder()
              .setCustomId("close_ticket")
              .setLabel("‚ùå ƒê√≥ng Ticket")
              .setStyle(ButtonStyle.Secondary)
          ),
        ],
      });
    } else if (interaction.customId === "close_ticket") {
      if (!member.roles.cache.has(roleSupport)) {
        return interaction.reply({
          content: "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng ch·ª©c nƒÉng n√†y!",
          ephemeral: true,
        });
      }
      await channel.send(
        "üîí Ticket n√†y ƒë√£ ƒë∆∞·ª£c ƒë√≥ng v√† di chuy·ªÉn v√†o l∆∞u tr·ªØ!"
      );

      const closedCategory = await getOrCreateClosedCategory(interaction.guild);
      await interaction.channel.setParent(closedCategory.id);

      // await channel.setParent(closedTicketCategory);
      // await interaction.reply({
      //   content: "üîí Ticket ƒë√£ ƒë∆∞·ª£c ƒë√≥ng!",
      //   ephemeral: true,
      // });
    }
  } else if (interaction.isModalSubmit()) {
    if (interaction.customId.startsWith("ticket_reason_")) {
      const reason = interaction.fields.getTextInputValue("reason_input");
      const guild = interaction.guild;
      const ticketType =
        interaction.customId === "ticket_reason_buy_ticket"
          ? "Mua h√†ng"
          : "H·ªó tr·ª£ / B·∫£o h√†nh";

      const ticketChannel = await guild.channels.create({
        name: `üíå‚îÉ${interaction.user.username}`,
        type: 0, // ChannelType.GuildText
        parent: ticketCategory,
        topic: user.id,
        permissionOverwrites: [
          {
            id: guild.id,
            deny: [PermissionsBitField.Flags.ViewChannel],
          },
          {
            id: user.id,
            allow: [
              PermissionsBitField.Flags.ViewChannel,
              PermissionsBitField.Flags.SendMessages,
              PermissionsBitField.Flags.AttachFiles,
            ],
          },
          {
            id: roleSupport,
            allow: [
              PermissionsBitField.Flags.ViewChannel,
              PermissionsBitField.Flags.SendMessages,
            ],
          },
        ],
      });

      const embed = new EmbedBuilder()
        .setTitle("Ma ƒê·∫°o Store Ticket")
        .setDescription(`\n\u200B**üìå M√¥ t·∫£ : ${reason}**\n\u200B`) // \u200B l√† kho·∫£ng tr·ªëng gi√∫p t·∫°o kho·∫£ng c√°ch
        .setColor("#FF9900")
        .setImage(
          "https://media.discordapp.net/attachments/1333290953842233354/1343213717306736640/GIF_UPDATE.gif"
        )
        .addFields(
          { name: "üë§ Ng∆∞·ªùi t·∫°o", value: `<@${user.id}>`, inline: true },
          { name: "‚ú® Lo·∫°i ticket", value: ticketType, inline: true },
          {
            name: "üïõ Th·ªùi gian t·∫°o",
            value: new Date().toLocaleString("vi-VN", {
              timeZone: "Asia/Ho_Chi_Minh",
            }),
            inline: true,
          }
        );

      const row = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
          .setCustomId("lock_ticket")
          .setLabel("Kho√° Ticket")
          .setStyle(ButtonStyle.Danger),
        new ButtonBuilder()
          .setCustomId("close_ticket")
          .setLabel("ƒê√≥ng Ticket")
          .setStyle(ButtonStyle.Secondary)
      );

      await ticketChannel.send({
        content: `<@&${roleSupport}> | Ticket c·ªßa <@${user.id}>`,
        embeds: [embed],
        components: [row],
      });
      await interaction.reply({
        content: `‚úÖ Ticket c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o t·∫°i ${ticketChannel}`,
        ephemeral: true,
      });
    }
  } else {
    if (!interaction.replied && !interaction.deferred) {
      await interaction.deferReply({ ephemeral: true });
    }
    return;
  }
};
